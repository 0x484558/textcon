name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            Download the appropriate binary for your platform below and add it to your PATH.

            ### macOS/Linux

            ```bash
            # Download the binary (replace with your platform)
            curl -L https://github.com/0x484558/textcon/releases/download/${{ steps.get_version.outputs.version }}/textcon-linux-x86_64.tar.gz | tar xz
            chmod +x textcon
            sudo mv textcon /usr/local/bin/
            ```

            ### Windows

            Download the Windows executable and add it to your PATH.

            ### From source
            ```bash
            cargo install textcon
            ```

            ## Changes

            See [CHANGELOG.md](https://github.com/0x484558/textcon/blob/main/CHANGELOG.md) for details.

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: textcon
            asset_name: textcon-linux-x86_64
            use_cross: false

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: textcon
            asset_name: textcon-linux-x86_64-musl
            use_cross: true

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: textcon
            asset_name: textcon-linux-aarch64
            use_cross: true

          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: textcon
            asset_name: textcon-macos-x86_64
            use_cross: false
          
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: textcon
            asset_name: textcon-macos-aarch64
            use_cross: false
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: textcon.exe
            asset_name: textcon-windows-x86_64
            use_cross: false

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Cross
        if: matrix.use_cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Package binary
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi
          cd -
        shell: bash

      - name: Upload tarball
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload zip
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip

  publish-crate:
    name: Publish to crates.io
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
        continue-on-error: true
